/* Generated By:JavaCC: Do not edit this line. TargetTableParserConstants.java */
package com.teradata.edwdecoded.sql.idtarget.targettableparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TargetTableParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 4;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int SEMICOLON = 8;
  /** RegularExpression Id. */
  int SINGLE_QUOTE = 9;
  /** RegularExpression Id. */
  int OPEN_PAREN = 10;
  /** RegularExpression Id. */
  int CLOSE_PAREN = 11;
  /** RegularExpression Id. */
  int COMMA = 12;
  /** RegularExpression Id. */
  int HYPHEN = 13;
  /** RegularExpression Id. */
  int ASTERISK = 14;
  /** RegularExpression Id. */
  int INTO = 15;
  /** RegularExpression Id. */
  int SET = 16;
  /** RegularExpression Id. */
  int NOT = 17;
  /** RegularExpression Id. */
  int FROM = 18;
  /** RegularExpression Id. */
  int AS = 19;
  /** RegularExpression Id. */
  int BY = 20;
  /** RegularExpression Id. */
  int WHERE = 21;
  /** RegularExpression Id. */
  int ALL = 22;
  /** RegularExpression Id. */
  int TABLE = 23;
  /** RegularExpression Id. */
  int CASESPECIFIC = 24;
  /** RegularExpression Id. */
  int CHARACTER = 25;
  /** RegularExpression Id. */
  int UPPERCASE = 26;
  /** RegularExpression Id. */
  int NULL = 27;
  /** RegularExpression Id. */
  int TO = 28;
  /** RegularExpression Id. */
  int LITERAL_INTEGER = 29;
  /** RegularExpression Id. */
  int BLOB = 30;
  /** RegularExpression Id. */
  int BYTE = 31;
  /** RegularExpression Id. */
  int VARBYTE = 32;
  /** RegularExpression Id. */
  int BIGINT = 33;
  /** RegularExpression Id. */
  int BYTEINT = 34;
  /** RegularExpression Id. */
  int DATE = 35;
  /** RegularExpression Id. */
  int DECIMAL = 36;
  /** RegularExpression Id. */
  int DOUBLE = 37;
  /** RegularExpression Id. */
  int PRECISION = 38;
  /** RegularExpression Id. */
  int FLOAT = 39;
  /** RegularExpression Id. */
  int INTEGER = 40;
  /** RegularExpression Id. */
  int NUMBER = 41;
  /** RegularExpression Id. */
  int NUMERIC = 42;
  /** RegularExpression Id. */
  int REAL = 43;
  /** RegularExpression Id. */
  int SMALLINT = 44;
  /** RegularExpression Id. */
  int TIME = 45;
  /** RegularExpression Id. */
  int TIMESTAMP = 46;
  /** RegularExpression Id. */
  int INTERVAL = 47;
  /** RegularExpression Id. */
  int DAY = 48;
  /** RegularExpression Id. */
  int HOUR = 49;
  /** RegularExpression Id. */
  int MINUTE = 50;
  /** RegularExpression Id. */
  int SECOND = 51;
  /** RegularExpression Id. */
  int MONTH = 52;
  /** RegularExpression Id. */
  int YEAR = 53;
  /** RegularExpression Id. */
  int CHAR = 54;
  /** RegularExpression Id. */
  int CLOB = 55;
  /** RegularExpression Id. */
  int VARYING = 56;
  /** RegularExpression Id. */
  int LONG = 57;
  /** RegularExpression Id. */
  int VARCHAR = 58;
  /** RegularExpression Id. */
  int GRAPHIC = 59;
  /** RegularExpression Id. */
  int VARGRAPHIC = 60;
  /** RegularExpression Id. */
  int UPDATE = 61;
  /** RegularExpression Id. */
  int INSERT = 62;
  /** RegularExpression Id. */
  int MERGE = 63;
  /** RegularExpression Id. */
  int DELETE = 64;
  /** RegularExpression Id. */
  int CREATE = 65;
  /** RegularExpression Id. */
  int CT = 66;
  /** RegularExpression Id. */
  int MULTISET = 67;
  /** RegularExpression Id. */
  int GLOBAL = 68;
  /** RegularExpression Id. */
  int TEMPORARY = 69;
  /** RegularExpression Id. */
  int VOLATILE = 70;
  /** RegularExpression Id. */
  int USING = 71;
  /** RegularExpression Id. */
  int DEFERRED = 72;
  /** RegularExpression Id. */
  int LOCATOR = 73;
  /** RegularExpression Id. */
  int NAME = 74;
  /** RegularExpression Id. */
  int LOCKING = 75;
  /** RegularExpression Id. */
  int DATABASE = 77;
  /** RegularExpression Id. */
  int TABLE_LCK = 78;
  /** RegularExpression Id. */
  int VIEW = 79;
  /** RegularExpression Id. */
  int ROW = 80;
  /** RegularExpression Id. */
  int FOR = 81;
  /** RegularExpression Id. */
  int IN = 82;
  /** RegularExpression Id. */
  int ACCESS = 83;
  /** RegularExpression Id. */
  int EXCLUSIVE = 84;
  /** RegularExpression Id. */
  int SHARE = 85;
  /** RegularExpression Id. */
  int READ = 86;
  /** RegularExpression Id. */
  int OVERRIDE = 87;
  /** RegularExpression Id. */
  int WRITE = 88;
  /** RegularExpression Id. */
  int CHECKSUM = 89;
  /** RegularExpression Id. */
  int DATABASE_OBJECT_NAME = 90;
  /** RegularExpression Id. */
  int OBJECT_NAME = 91;
  /** RegularExpression Id. */
  int CURRENT = 92;
  /** RegularExpression Id. */
  int VALIDTIME = 93;
  /** RegularExpression Id. */
  int SEQUENCED = 94;
  /** RegularExpression Id. */
  int NONSEQUENCED = 95;
  /** RegularExpression Id. */
  int NONTEMPORAL = 96;
  /** RegularExpression Id. */
  int PERIOD = 97;
  /** RegularExpression Id. */
  int UNTIL_CHANGED = 98;
  /** RegularExpression Id. */
  int UNTIL_CLOSED = 99;
  /** RegularExpression Id. */
  int PERIOD_BOUND = 100;
  /** RegularExpression Id. */
  int MODE = 101;
  /** RegularExpression Id. */
  int NOWAIT = 102;
  /** RegularExpression Id. */
  int IDENTIFIER = 103;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int ML_COMMENT_STATE = 1;
  /** Lexical state. */
  int LOCKING_STATE = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "<token of kind 3>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 6>",
    "<SINGLE_LINE_COMMENT>",
    "\";\"",
    "\"\\\'\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"-\"",
    "\"*\"",
    "\"into\"",
    "\"set\"",
    "\"not\"",
    "\"from\"",
    "\"as\"",
    "\"by\"",
    "\"where\"",
    "\"all\"",
    "\"table\"",
    "\"casespecific\"",
    "\"character\"",
    "\"uppercase\"",
    "\"null\"",
    "\"to\"",
    "<LITERAL_INTEGER>",
    "\"blob\"",
    "\"byte\"",
    "\"varbyte\"",
    "\"bigint\"",
    "\"byteint\"",
    "\"date\"",
    "\"decimal\"",
    "\"double\"",
    "\"precision\"",
    "\"float\"",
    "\"integer\"",
    "\"number\"",
    "\"numeric\"",
    "\"real\"",
    "\"smallint\"",
    "\"time\"",
    "\"timestamp\"",
    "\"interval\"",
    "\"day\"",
    "\"hour\"",
    "\"minute\"",
    "\"second\"",
    "\"month\"",
    "\"year\"",
    "\"char\"",
    "\"clob\"",
    "\"varying\"",
    "\"long\"",
    "\"varchar\"",
    "\"graphic\"",
    "\"vargraphic\"",
    "<UPDATE>",
    "<INSERT>",
    "\"merge\"",
    "<DELETE>",
    "\"create\"",
    "\"ct\"",
    "\"multiset\"",
    "\"global\"",
    "\"temporary\"",
    "\"volatile\"",
    "\"using\"",
    "\"deferred\"",
    "\"locator\"",
    "\"name\"",
    "<LOCKING>",
    "<token of kind 76>",
    "\"database\"",
    "\"table\"",
    "\"view\"",
    "\"row\"",
    "\"for\"",
    "\"in\"",
    "\"access\"",
    "<EXCLUSIVE>",
    "\"share\"",
    "\"read\"",
    "\"override\"",
    "\"write\"",
    "\"checksum\"",
    "<DATABASE_OBJECT_NAME>",
    "<OBJECT_NAME>",
    "\"current\"",
    "\"validtime\"",
    "\"sequenced\"",
    "\"nonsequenced\"",
    "\"nontemporal\"",
    "\"period\"",
    "\"until_changed\"",
    "\"until_closed\"",
    "<PERIOD_BOUND>",
    "\"mode\"",
    "\"nowait\"",
    "<IDENTIFIER>",
  };

}
