/* TargetTableParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. TargetTableParserTokenManager.java */
package com.teradata.edwdecoded.sql.idtarget.targettableparser;
import com.teradata.edwdecoded.sql.idtarget.Debug;

/** Token Manager. */
public class TargetTableParserTokenManager implements TargetTableParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x3efe000L) != 0L)
         {
            jjmatchedKind = 90;
            return 20;
         }
         return -1;
      case 1:
         if ((active1 & 0x3ebe000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 1;
            return 20;
         }
         if ((active1 & 0x40000L) != 0L)
            return 20;
         return -1;
      case 2:
         if ((active1 & 0x30000L) != 0L)
            return 20;
         if ((active1 & 0x3e8e000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 2;
            return 20;
         }
         return -1;
      case 3:
         if ((active1 & 0x3a86000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 3;
            return 20;
         }
         if ((active1 & 0x408000L) != 0L)
            return 20;
         return -1;
      case 4:
         if ((active1 & 0x2882000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 4;
            return 20;
         }
         if ((active1 & 0x1204000L) != 0L)
            return 20;
         return -1;
      case 5:
         if ((active1 & 0x2802000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
            return 20;
         }
         if ((active1 & 0x80000L) != 0L)
            return 20;
         return -1;
      case 6:
         if ((active1 & 0x2802000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 6;
            return 20;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_2(0x80000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_2(0x2000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_2(0x2000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_2(0x20000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_2(0x40000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_2(0x800000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_2(0x410000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_2(0x200000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_2(0x4000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_2(0x8000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_2(0x1000000L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_2(active1, 0x6000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_2(active1, 0x80000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_2(active1, 0x400000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_2(active1, 0x2200000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_2(active1, 0x8000L);
      case 78:
      case 110:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(1, 82, 20);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_2(active1, 0x30000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_2(active1, 0x1000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_2(active1, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_2(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_2(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_2(active1, 0x600000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_2(active1, 0x4000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_2(active1, 0x80000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_2(active1, 0x2808000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_2(active1, 0x1000000L);
      case 82:
      case 114:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(2, 81, 20);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_2(active1, 0x2000L);
      case 87:
      case 119:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(2, 80, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_2(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_2(active1, 0x2000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_2(active1, 0x2000000L);
      case 68:
      case 100:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(3, 86, 20);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_2(active1, 0x80000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_2(active1, 0x4000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_2(active1, 0xa00000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_2(active1, 0x1000000L);
      case 87:
      case 119:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(3, 79, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_2(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_2(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_2(active1, 0x2000L);
      case 69:
      case 101:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(4, 78, 20);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(4, 85, 20);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(4, 88, 20);
         break;
      case 75:
      case 107:
         return jjMoveStringLiteralDfa5_2(active1, 0x2000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_2(active1, 0x800000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_2(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_2(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_2(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_2(active1, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_2(active1, 0x800000L);
      case 83:
      case 115:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(5, 83, 20);
         return jjMoveStringLiteralDfa6_2(active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_2(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_2(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_2(active1, 0x800000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_2(active1, 0x2000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_2(active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_2(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_2(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(7, 77, 20);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(7, 87, 20);
         break;
      case 77:
      case 109:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(7, 89, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_2(6, 0L, active1);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 20:
                  if ((0x3ff001800000000L & l) != 0L)
                     { jjCheckNAddTwoStates(5, 6); }
                  else if (curChar == 46)
                     { jjCheckNAdd(7); }
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     { jjCheckNAdd(4); }
                  }
                  break;
               case 1:
                  if (curChar == 10 && kind > 76)
                     kind = 76;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAdd(4); }
                  break;
               case 5:
                  if ((0x3ff001800000000L & l) != 0L)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 6:
                  if (curChar == 46)
                     { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAdd(7); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     { jjCheckNAddStates(0, 2); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(3, 4); }
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(5, 6); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     { jjCheckNAdd(4); }
                  }
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAdd(4); }
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(3, 4); }
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L && kind > 84)
                     kind = 84;
                  break;
               case 10:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x100000001000L & l) != 0L && kind > 84)
                     kind = 84;
                  break;
               case 18:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x9dfe7ec7dbff0000L) != 0L || (active1 & 0x63f000047eL) != 0L)
         {
            jjmatchedKind = 103;
            return 11;
         }
         if ((active0 & 0x1003800000000L) != 0L || (active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 103;
            return 27;
         }
         if ((active0 & 0x4000000L) != 0L || (active1 & 0xc00000080L) != 0L)
         {
            jjmatchedKind = 103;
            return 43;
         }
         if ((active0 & 0x810000008000L) != 0L)
         {
            jjmatchedKind = 103;
            return 35;
         }
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 103;
            return 18;
         }
         if ((active0 & 0x2000L) != 0L)
            return 3;
         return -1;
      case 1:
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 17;
         }
         if ((active0 & 0x9dff7eeb4be70000L) != 0L || (active1 & 0x6ff00004faL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 11;
         }
         if ((active0 & 0x490180000L) != 0L || (active1 & 0x4L) != 0L)
            return 11;
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 42;
         }
         if ((active0 & 0x1000000000L) != 0L || (active1 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 26;
         }
         if ((active0 & 0x810000008000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 34;
         }
         return -1;
      case 2:
         if ((active0 & 0x1000000430000L) != 0L)
            return 11;
         if ((active0 & 0x9ffeffffcfa48000L) != 0L || (active1 & 0x6ff00005faL) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 2;
            return 11;
         }
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 2;
            return 16;
         }
         return -1;
      case 3:
         if ((active0 & 0x9d1c97f305a00000L) != 0L || (active1 & 0x4ff00003faL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 3;
            }
            return 11;
         }
         if ((active0 & 0x2e2680cca048000L) != 0L || (active1 & 0x2000000400L) != 0L)
            return 11;
         return -1;
      case 4:
         if ((active0 & 0x1d0cd77707000000L) != 0L || (active1 & 0x4ff000037aL) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 4;
            return 11;
         }
         if ((active0 & 0x8010008000a00000L) != 0L || (active1 & 0x80L) != 0L)
            return 11;
         return -1;
      case 5:
         if ((active0 & 0xc022200000000L) != 0L || (active1 & 0x4200000012L) != 0L)
            return 11;
         if ((active0 & 0x1d00d55507000000L) != 0L || (active1 & 0xdf0000368L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
            return 11;
         }
         return -1;
      case 6:
         if ((active0 & 0x1000d04007000000L) != 0L || (active1 & 0xde0000168L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 6;
            return 11;
         }
         if ((active0 & 0xd00051500000000L) != 0L || (active1 & 0x10000200L) != 0L)
            return 11;
         return -1;
      case 7:
         if ((active0 & 0x1000404007000000L) != 0L || (active1 & 0xde0000020L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 7;
            return 11;
         }
         if ((active0 & 0x900000000000L) != 0L || (active1 & 0x148L) != 0L)
            return 11;
         return -1;
      case 8:
         if ((active0 & 0x404006000000L) != 0L || (active1 & 0x60000020L) != 0L)
            return 11;
         if ((active0 & 0x1000000001000000L) != 0L || (active1 & 0xd80000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 8;
            return 11;
         }
         return -1;
      case 9:
         if ((active0 & 0x1000000L) != 0L || (active1 & 0xd80000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 9;
            return 11;
         }
         if ((active0 & 0x1000000000000000L) != 0L)
            return 11;
         return -1;
      case 10:
         if ((active0 & 0x1000000L) != 0L || (active1 & 0xc80000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 10;
            return 11;
         }
         if ((active1 & 0x100000000L) != 0L)
            return 11;
         return -1;
      case 11:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 11;
            return 11;
         }
         if ((active0 & 0x1000000L) != 0L || (active1 & 0x880000000L) != 0L)
            return 11;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 9);
      case 40:
         return jjStopAtPos(0, 10);
      case 41:
         return jjStopAtPos(0, 11);
      case 42:
         return jjStopAtPos(0, 14);
      case 44:
         return jjStopAtPos(0, 12);
      case 45:
         return jjStartNfaWithStates_0(0, 13, 3);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 59:
         return jjStopAtPos(0, 8);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x480000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x6c0100000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xc0000003000000L, 0x10000006L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1003800000000L, 0x100L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8000040000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x10L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x810000008000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x200L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x8014000000000000L, 0x2000000008L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x60008020000L, 0x4180000400L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x200000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8100000010000L, 0x40000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x600010800000L, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0xc00000080L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1500000100000000L, 0x20000040L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1501000901800000L, active1, 0x20000400L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8028081000010000L, active1, 0x240000120L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000002200000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4600200000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80008040400000L, active1, 0x10L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x810000008000L, active1, 0xc00000000L);
      case 79:
      case 111:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 11);
         return jjMoveStringLiteralDfa2_0(active0, 0x212002000020000L, active1, 0x6180000240L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x800004000040000L, active1, 0x2L);
      case 83:
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 11);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L);
      case 84:
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 66, 11);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x60008000000L, active1, 0x10000008L);
      case 89:
      case 121:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x480000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x860180002000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8001000000000L, active1, 0x200L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000200000L, active1, 0x2L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L);
      case 76:
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 11);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0x20000048L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x660000000000L, active1, 0x420L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x214000000000000L, active1, 0x180000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80008040040000L, active1, 0x10L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x9500000100000000L, active1, 0x210000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 11);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 11);
         return jjMoveStringLiteralDfa3_0(active0, 0x810c80008000L, active1, 0xc00000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2002000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000L);
      case 89:
      case 121:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x4000000242L);
      case 66:
      case 98:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 11);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 11);
         return jjMoveStringLiteralDfa4_0(active0, 0x22100000000L, active1, 0x10L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400004000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 11);
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 11);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 101, 11);
         return jjMoveStringLiteralDfa4_0(active0, 0xc50405000000L, active1, 0x100L);
      case 71:
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 11);
         return jjMoveStringLiteralDfa4_0(active0, 0x9000000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1200000000L, active1, 0xe20000000L);
      case 76:
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 11);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 11);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000800000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 11);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 79:
      case 111:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 11);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x20L);
      case 82:
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 11);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 11);
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2200000L, active1, 0x10000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x100000008L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x40000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x10L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000L);
      case 69:
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 11);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 11);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 11);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0x1d0000000L);
      case 71:
      case 103:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 11);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L);
      case 72:
      case 104:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 11);
         return jjMoveStringLiteralDfa5_0(active0, 0xc00000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x100004400000000L, active1, 0x4000000008L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x102000000000L, active1, 0xc00000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000200000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000020L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000840004000000L, active1, 0x100L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x400001000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 11);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0x242L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc00000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1400001000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x6000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 11);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 11);
         break;
      case 69:
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 11);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 11);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 11);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800140000000000L, active1, 0x40L);
      case 76:
      case 108:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 11);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000400000000L, active1, 0x50000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000L);
      case 82:
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 11);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x120L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x8L);
      case 84:
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 11);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 11);
         return jjMoveStringLiteralDfa6_0(active0, 0x400100000000L, active1, 0x20000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0xc00004000000L, active1, 0x20L);
      case 67:
      case 99:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 11);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xc40000000L);
      case 69:
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0x108L);
      case 71:
      case 103:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 11);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0x20000000L);
      case 76:
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0x100000000L);
      case 82:
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 11);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 11);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 11);
         break;
      case 84:
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 11);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 92, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 11);
         break;
      case 69:
      case 101:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 11);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L, active1, 0xc0000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0x400000000L);
      case 76:
      case 108:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 47, 11);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0x20000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0x100000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 11);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000L);
      case 68:
      case 100:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 94, 11);
         break;
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 26, 11);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 93, 11);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000001000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 11);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000L);
      case 80:
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 46, 11);
         break;
      case 82:
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 11);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000L);
      case 89:
      case 121:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 69, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000L);
      case 67:
      case 99:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 60, 11);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x880000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L, active1, 0L);
      case 76:
      case 108:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 96, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 24, 11);
         break;
      case 68:
      case 100:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(11, 95, 11);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(11, 99, 11);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(12, 98, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 46;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
               case 11:
                  if ((0x3ff401800000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(11); }
                  break;
               case 34:
                  if ((0x3ff401800000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(11); }
                  break;
               case 43:
                  if ((0x3ff401800000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(11); }
                  break;
               case 27:
                  if ((0x3ff401800000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(11); }
                  break;
               case 42:
                  if ((0x3ff401800000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(11); }
                  break;
               case 3:
                  if ((0x7ff280000000000L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                     { jjCheckNAdd(10); }
                  }
                  if (curChar == 45)
                  {
                     if (kind > 7)
                        kind = 7;
                     { jjCheckNAddStates(5, 7); }
                  }
                  break;
               case 26:
                  if ((0x3ff401800000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(11); }
                  break;
               case 18:
                  if ((0x3ff401800000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(11); }
                  break;
               case 17:
                  if ((0x3ff401800000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(11); }
                  break;
               case 35:
                  if ((0x3ff401800000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(11); }
                  break;
               case 0:
                  if ((0x3ff401800000000L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAdd(11); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 3)
                        kind = 3;
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if ((0x7ff280000000000L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                     { jjCheckNAdd(10); }
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     { jjCheckNAdd(9); }
                  }
                  break;
               case 1:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddStates(5, 7); }
                  break;
               case 5:
                  if ((0x2400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 6:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 7:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(9); }
                  break;
               case 10:
                  if ((0x7ff280000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  { jjCheckNAdd(10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x80000000800L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                  }
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x1000000010L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x100000001000L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(8, 9); }
                  else if ((0x20000000200L & l) != 0L)
                     { jjAddStates(10, 11); }
                  else if ((0x1000000010L & l) != 0L)
                     { jjAddStates(12, 13); }
                  else if ((0x100000001000L & l) != 0L)
                     { jjAddStates(14, 15); }
                  break;
               case 4:
                  if (kind > 7)
                     kind = 7;
                  { jjAddStates(5, 7); }
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(11); }
                  break;
               case 12:
                  if ((0x100000001000L & l) != 0L)
                     { jjAddStates(14, 15); }
                  break;
               case 13:
                  if ((0x8000000080L & l) != 0L && kind > 75)
                     kind = 75;
                  break;
               case 14:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 19:
                  if ((0x80000000800L & l) != 0L && kind > 75)
                     kind = 75;
                  break;
               case 20:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(12, 13); }
                  break;
               case 23:
                  if ((0x2000000020L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 24:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 28:
                  if ((0x100000001000L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x20000000200L & l) != 0L)
                     { jjAddStates(10, 11); }
                  break;
               case 31:
                  if ((0x10000000100000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 32:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 36:
                  if ((0x8000000080000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 37:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(8, 9); }
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 40:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 44:
                  if ((0x1000000010L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 45:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjAddStates(5, 7); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 46 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x20L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      default :
         return 2;
   }
   return 2;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\73", "\47", "\50", "\51", 
"\54", "\55", "\52", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   4, 5, 6, 16, 19, 4, 5, 7, 43, 45, 35, 37, 27, 29, 18, 21, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 6)
       {
          jjmatchedKind = 6;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public TargetTableParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public TargetTableParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 46; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "ML_COMMENT_STATE",
   "LOCKING_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   2, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0xfff7ffefffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x1000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[46];
    private final int[] jjstateSet = new int[2 * 46];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
